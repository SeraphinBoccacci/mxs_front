# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1

jobs:
  build:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: circleci/node:12-browsers

    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout

      # https://stackoverflow.com/questions/58527269/add-mongodb-to-circle-ci
      - setup_remote_docker

      - node/install-packages:
          pkg-manager: yarn

      - persist_to_workspace:
          root: .
          paths:
            - .

  test:
    docker:
      - image: circleci/node:12-browsers

    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Reuse the workspace from the build job
      - attach_workspace:
          at: .

      - run:
          name: Compile Typescript
          command: npx tsc

      # To uncomment when tests setup on front
      # - run:
      #    name: Run tests
      #    command: npm run test
      #
      # - run:
      #    name: Check coverage
      #    command: npm run coverage

      - run:
          name: Check Linter
          command: yarn lint

      - run:
          name: Check Style Linter
          command: yarn lint:style

  deploy-staging:
    docker:
      - image: circleci/node:12-browsers
      - image: circleci/mongo:4.4
      - image: circleci/redis:6.0.14

    steps:
      - checkout
      - run: ssh -oStrictHostKeyChecking=no -v $USER@$IP "~/scripts/deploy-front-staging.sh"

  deploy-production:
    docker:
      - image: circleci/node:12-browsers
      - image: circleci/mongo:4.4
      - image: circleci/redis:6.0.14

    steps:
      - checkout
      - run: ssh -oStrictHostKeyChecking=no -v $USER@$IP "~/scripts/deploy-front-production.sh"

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  build-project:
    jobs:
      - build
      - test:
          requires:
            - build
      - hold:
          type: approval
          requires:
            - build
            - test
          filters:
            branches:
              only:
                - main
                - development
      - deploy-production:
          requires:
            - hold
          filters:
            branches:
              only:
                - main
      - deploy-staging:
          requires:
            - hold
          filters:
            branches:
              only:
                - development
